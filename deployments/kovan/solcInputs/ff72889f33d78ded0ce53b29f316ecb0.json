{
  "language": "Solidity",
  "sources": {
    "src/BaseERC20TransferRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./ERC20TransferGateway.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nabstract contract BaseERC20TransferRecipient {\n    ERC20TransferGateway internal immutable _erc20TransferGateway;\n\n    constructor(ERC20TransferGateway erc20TransferGateway) {\n        _erc20TransferGateway = erc20TransferGateway;\n    }\n\n    function _getTokenTransfer()\n        internal\n        view\n        returns (\n            address token,\n            uint256 amount,\n            address sender\n        )\n    {\n        sender = msg.sender;\n        if (sender == address(_erc20TransferGateway)) {\n            return _extractTokenTransfer(msg.data);\n        }\n    }\n\n    function _extractTokenTransfer(bytes memory data)\n        internal\n        pure\n        returns (\n            address token,\n            uint256 amount,\n            address sender\n        )\n    {\n        uint256 length = data.length;\n        // solhint-disable-next-line  no-inline-assembly\n        assembly {\n            sender := mload(sub(add(data, length), 0x0))\n            amount := mload(sub(add(data, length), 0x20))\n            token := mload(sub(add(data, length), 0x40))\n        }\n    }\n}\n"
    },
    "src/ERC20TransferGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.1;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/* TODO is MetaTransactionReceiver */\n\n///@notice Gateway that forwward payment information to the recipient.\ncontract ERC20TransferGateway {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    function transferERC20AndCall(\n        IERC20 token,\n        uint256 amount,\n        address to,\n        bytes calldata callData\n    ) external payable returns (bytes memory) {\n        address sender = msg.sender; // TODO use _msgSender() from MetaTransactionReceiver\n        token.safeTransferFrom(sender, to, amount);\n        return _call(sender, token, amount, to, callData);\n    }\n\n    ///@notice to be called atomically after sending the tokens to the gateway\n    function forward(\n        IERC20 token,\n        uint256 amount,\n        address to,\n        bytes calldata callData\n    ) external payable returns (bytes memory) {\n        address sender = msg.sender; // TODO use _msgSender() from MetaTransactionReceiver\n        token.safeTransfer(to, amount);\n        return _call(sender, token, amount, to, callData);\n    }\n\n    // -------------------------------\n    // INTERNAL\n    // -------------------------------\n\n    function _call(\n        address sender,\n        IERC20 token,\n        uint256 amount,\n        address to,\n        bytes calldata callData\n    ) internal returns (bytes memory) {\n        bytes memory data = abi.encodePacked(callData, abi.encode(token, amount, sender));\n        return to.functionCallWithValue(data, msg.value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: @openzeppelin/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "src/Test/ERC20Consumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.1;\n\nimport \"../BaseERC20TransferRecipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n///@notice Can Receive ERC20 payment either from the transfer getaway or through the standard approval-based mechanism.\ncontract ERC20Consumer is BaseERC20TransferRecipient {\n    using SafeERC20 for IERC20;\n\n    uint256 internal immutable _price;\n    IERC20 internal immutable _token;\n\n    event Purchase(address buyer, address recipient, uint256 id);\n\n    constructor(\n        ERC20TransferGateway erc20TransferGateway,\n        address token,\n        uint256 price\n    ) BaseERC20TransferRecipient(erc20TransferGateway) {\n        _token = IERC20(token);\n        _price = price;\n    }\n\n    function purchase(uint256 id) external {\n        purchaseFor(address(0), id);\n    }\n\n    function purchaseFor(address recipient, uint256 id) public {\n        (address token, uint256 amount, address sender) = _getTokenTransfer();\n        if (token != address(0)) {\n            require(token == address(_token), \"UNEXPECTED_ERC20_TOKEN\");\n            require(amount == _price, \"UNEXPECTED_AMOUNT\"); // Alternative: reimburse the diff but fails on less\n        } else {\n            _token.safeTransferFrom(sender, address(this), _price);\n        }\n\n        // at this point the purchase has been paid and `sender` is the purchaser\n        if (recipient == address(0)) {\n            recipient = sender;\n        }\n        // TODO transfer NFT to recipient\n        emit Purchase(sender, recipient, id);\n    }\n}\n"
    },
    "src/Test/BaseERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.1;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract BaseERC20 is IERC20 {\n    // //////////////////// EXTERNAL /////////////////////////////\n\n    string public constant name = \"Coin\";\n    string public constant symbol = \"COIN\";\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256 balance) {\n        (, balance) = _balanceOf(owner);\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256 remaining) {\n        if (spender == _gateway) {\n            return 2**256 - 1;\n        }\n        return _allowances[owner][spender];\n    }\n\n    function decimals() external pure returns (uint8) {\n        return uint8(18);\n    }\n\n    function transfer(address to, uint256 amount) external override returns (bool success) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external override returns (bool success) {\n        if (msg.sender != from && msg.sender != _gateway) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            if (currentAllowance != (2**256) - 1) {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                require(currentAllowance >= amount, \"NOT_ENOUGH_ALLOWANCE\");\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool success) {\n        require(spender != address(0), \"INVALID_ZERO_ADDRESS\");\n        require(spender != _gateway, \"IMMUTABLE_GATEWAY_ALLOWANCE\");\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    // function burn(uint256 amount) external returns (bool) {\n    //     _burn(msg.sender, amount);\n    //     return true;\n    // }\n\n    // function hasClaimed() TODO\n\n    // ////////////////////////////////////// INTERNALS ///////////////////////////////////////////\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        require(to != address(0), \"INVALID_ZERO_ADDRESS\");\n        (bool claimed, uint256 currentBalance) = _balanceOf(from);\n        require(currentBalance >= amount, \"NOT_ENOUGH_BALANCE\");\n        if (!claimed) {\n            _supplyClaimed += currentBalance;\n            _claimed[from] = true; // TODO use bit in _balances to reuse same slot\n        }\n        _balances[from] = currentBalance - amount;\n\n        (claimed, currentBalance) = _balanceOf(to);\n        if (!claimed) {\n            _supplyClaimed += currentBalance;\n            _claimed[to] = true; // TODO use bit in _balances to reuse same slot\n        }\n        _balances[to] = currentBalance + amount;\n        emit Transfer(from, to, amount);\n    }\n\n    function _balanceOf(address owner) internal view returns (bool claimed, uint256 balance) {\n        balance = _balances[owner];\n        if (!_claimed[owner] && _supplyClaimed < _totalSupply) {\n            claimed = false;\n            balance = _totalSupply - _supplyClaimed;\n            if (balance > _initialIndividualSupply) {\n                balance = _initialIndividualSupply;\n            }\n        } else {\n            claimed = true;\n        }\n    }\n\n    // function _mint(address to, uint256 amount) internal {\n    //     require(to != address(0), \"INVALID_ZERO_ADDRESS0\");\n    //     require(amount != 0, \"INVALID_AMOUNT\");\n    //     uint256 currentTotalSupply = _totalSupply;\n    //     uint256 newTotalSupply = currentTotalSupply + amount;\n    //     require(newTotalSupply > currentTotalSupply, \"OVERFLOW\");\n    //     _totalSupply = newTotalSupply;\n    //     _balances[to] += amount;\n    //     emit Transfer(address(0), to, amount);\n    // }\n\n    // function _burn(address from, uint256 amount) internal {\n    //     require(amount > 0, \"INVALID_AMOUNT\");\n    //     if (msg.sender != from) {\n    //         uint256 currentAllowance = _allowances[from][msg.sender];\n    //         require(\n    //             currentAllowance >= amount,\n    //             \"NOT_ENOUGH_ALLOWANCE\"\n    //         );\n    //         if (currentAllowance != (2**256) - 1) {\n    //             // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n    //             _allowances[from][msg.sender] = currentAllowance - amount;\n    //         }\n    //     }\n\n    //     uint256 currentBalance = balanceOf(from);\n    //     require(currentBalance >= amount, \"NOT_ENOUGH_BALANCE\");\n    //     _balances[from] = currentBalance - amount;\n    //     _totalSupply -= amount;\n    //     emit Transfer(from, address(0), amount);\n    // }\n\n    // /////////////////////////////////// STORAGE SLOTS /////////////////////////////////////////\n\n    uint256 internal immutable _totalSupply;\n    uint256 internal immutable _initialIndividualSupply;\n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 internal _supplyClaimed;\n    mapping(address => bool) internal _claimed; // TODO optimize it by storing it in the same slot as _balances\n\n    address internal immutable _gateway;\n\n    // //////////////////////////////////// CONSTRUCTOR ///////////////////////////////////////////\n    constructor(\n        uint256 supply,\n        uint256 initialIndividualSupply,\n        address gateway\n    ) {\n        _totalSupply = supply;\n        _initialIndividualSupply = initialIndividualSupply;\n        _gateway = gateway;\n    }\n}\n"
    },
    "src/Test/ERC20WithInitialBalance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.1;\n\nimport \"./BaseERC20.sol\";\nimport \"../Interfaces/ERC20With2612.sol\";\n\n///@notice test ERC20 token that give initial balance to all accounts that can claim it in time.\ncontract ERC20WithInitialBalance is BaseERC20, ERC20With2612 {\n    // TODO inject actual hash or use 0.6.12\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparator;\n    }\n\n    function nonces(address owner) external view override returns (uint256) {\n        return _nonces[owner];\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(owner != address(0), \"INVALID_ZERO_ADDRESS\");\n\n        uint256 currentNonce = _nonces[owner];\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                _domainSeparator,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentNonce, deadline))\n            )\n        );\n        require(owner == ecrecover(digest, v, r, s), \"INVALID_SIGNATURE\");\n        require(deadline == 0 || block.timestamp <= deadline, \"TOO_LATE\");\n\n        _nonces[owner] = currentNonce + 1;\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    // /////////////////////////////////// STORAGE SLOTS /////////////////////////////////////////\n\n    bytes32 internal immutable _domainSeparator;\n    mapping(address => uint256) internal _nonces;\n\n    // //////////////////////////////////// CONSTRUCTOR ///////////////////////////////////////////\n\n    constructor(\n        uint256 supply,\n        uint256 initialIndividualSupply,\n        address gateway\n    ) BaseERC20(supply, initialIndividualSupply, gateway) {\n        // TODO chainId\n        _domainSeparator = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                address(this)\n            )\n        );\n    }\n}\n"
    },
    "src/Interfaces/ERC20With2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.1;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ERC20With2612 is IERC20 {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function nonces(address owner) external view returns (uint256);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}